using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlatformManager : MonoBehaviour
{
    public static PlatformManager instance;

    // Launch the persistence of the gameObject
    void Awake()
    {
        if (instance != null)
        {
            return;
        }
        // end of new code

        instance = this;
    }

    [SerializeField] private bool b_JumpingObjectCreationAllowed;

    public void SetJumpingObjectCreationAllowed( bool b_newJumpingObjectCreationAllowed )   { b_JumpingObjectCreationAllowed = b_newJumpingObjectCreationAllowed;}


    void Update()
    {
        CreationPlatform(); 
    }

    // Creation the X position of the latest GameObject Platform created
    // If the X position + the gap between this platform and a new one is less or equal than 50, create a new Platform
    private void CreationPlatform()
    {
        if (CheckCreationPlatform())
        {
            int i_indexLastPlatform = transform.childCount;

            // Retrieve the Platform GameObject that will be added regarding the current level
            GameObject go_PlatformTemplate = GameObject.Find("LevelManager").GetComponent<LevelManager_Platform>().GetPlatformTemplate();

            GameObject go_newPlatform = Instantiate(go_PlatformTemplate, gameObject.transform);

            float f_newPositionX = gameObject.transform.GetChild(i_indexLastPlatform-1).GetComponent<Transform>().position.x + ComputeGapPlatform(go_newPlatform, i_indexLastPlatform);

            go_newPlatform.GetComponent<Transform>().position = new Vector3(f_newPositionX, 0,0);

            go_newPlatform.GetComponent<MeshRenderer>().material = GameObject.Find("LevelManager").GetComponent<LevelManager_Platform>().GetPlatformMaterial();

            go_newPlatform.name = "Platform_" + LevelManager.instance.GetLevel();

            GameObject.Find("LevelManager").GetComponent<LevelManager_SpawnObject>().CreationObject(go_newPlatform);

            if (b_JumpingObjectCreationAllowed)
            {
                GameObject.Find("LevelManager").GetComponent<LevelManager_SpawnEnemies>().CreateJumpingEnemy();
                b_JumpingObjectCreationAllowed = false;
            }
        }
    }

    // Function to create the gap between last Platform and the new Platform
    // For that, we take the size of both platform and we add the Gap generated by the Level
    private float ComputeGapPlatform(GameObject go_newPlatform, int i_indexLastPlatform)
    {
        // Create the gap between last Platform and the new Platform
        float f_newPositionX = gameObject.transform.GetChild(i_indexLastPlatform-2).GetComponent<PlatformProperty>().GetSizePlatform() + go_newPlatform.GetComponent<PlatformProperty>().GetSizePlatform();
        
        f_newPositionX += GameObject.Find("LevelManager").GetComponent<LevelManager_Platform>().GetPlatformGap();

        return f_newPositionX;
    }

    // Function to Check if we can create a new Platform
    private bool CheckCreationPlatform()
    {
        int i_indexLastPlatform = transform.childCount;

        float f_CheckSize = transform.GetChild(i_indexLastPlatform-1).position.x + transform.GetChild(i_indexLastPlatform-1).GetComponent<PlatformProperty>().GetSizePlatform();

        if (f_CheckSize - GameObject.Find("Main Camera").transform.position.x < 30)
        {
            return true;
        }
        else
            return false;
    }
}
